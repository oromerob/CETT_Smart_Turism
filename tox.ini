# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

# tox.ini template version 3.1.0
# tox.ini digest: sha-1:4801ba972bd70f3229109940b0e00bc4c0bce703
# template project URL: https://git-sd.genego.com/pyshelly/tox-ini-template
# versions changelog: https://git-sd.genego.com/pyshelly/tox-ini-template/blob/master/CHANGELOG.md

# The following structure of package folders is expected:
# - Tests (other than doctests) are located in "test" folder.
# - Documentation is prepared in "sphinx" format, and located in "docs" folder.
# So a root of the package looks like:
# - "top_level_package" derived from "python_package_namespace" variable
# - test
# - docs

[lib]
python_package_namespace=spatial_distribution_tourist_perception
python_package_folder=spatial_distribution_tourist_perception
top_package_folder=spatial_distribution_tourist_perception
default_python_version_short=py36


[tox]
envlist = py36


[coverage]
prepare_commands =
    /usr/bin/env bash -c '[ -f {toxinidir}/.coveragerc ] || printf "[run]\nbranch=True" > {toxinidir}/.coveragerc'


[testenv]
deps =
    pyhamcrest
    mock
    coverage
    py27: pylint<2
    !py27: pylint
    flake8
    pytest
    pytest-cov
    pytest-timeout
passenv = PIP_EXTRA_INDEX_URL PIP_TRUSTED_HOST
install_command = pip install {opts} {packages}
# This is the main testing command, intended for comprehensive testing.
# It's supposed to fail (exit code != 0) if tests don't pass
commands =
    py.test {posargs:\
    {envsitepackagesdir}/{[lib]python_package_folder} \
    test \
    --doctest-modules \
    --durations=10}


[testenv:check_code]
envdir = {toxworkdir}/{[lib]default_python_version_short}
# This is a command performing differents check of the code,
#   and saving results in files for further processing (visualization, for inst.).
# It is designed to ignore errors, and should not be used for testing per se.
commands =
    {[coverage]prepare_commands}
    py.test \
        {[lib]python_package_folder} \
        test \
        --doctest-modules \
        --junit-xml={toxinidir}nosetests.xml \
        --cov={[lib]python_package_namespace} \
        --cov-report xml:{toxinidir}/coverage.xml
    pylint -f parseable --files-output=y {[lib]top_package_folder}
    flake8 --output-file=flake8.txt {[lib]top_package_folder}
ignore_errors = True
ignore_outcome = True


[testenv:doctests]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    py.test \
        {[lib]python_package_folder} \
        --doctest-modules \
        --durations=10


[testenv:test_fast]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    py.test -v \
        test \
        -m "not slow" \
        --durations=10
ignore_outcome = True


[testenv:test_slow]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    py.test \
        -m slow \
        --durations=0
ignore_outcome = True


[testenv:pylint]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    pylint {[lib]top_package_folder}
ignore_outcome = True


[testenv:flake8]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    flake8 {[lib]top_package_folder}
ignore_outcome = True


[testenv:coverage_html]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    {[coverage]prepare_commands}
    py.test \
        {[lib]python_package_folder} \
        test \
        --doctest-modules \
        --cov={[lib]python_package_namespace} \
        --cov-report html:{toxinidir}/coverage_html
ignore_outcome = True


[testenv:docs]
envdir = {toxworkdir}/docs
changedir = docs
deps =
    sphinx
    sphinx-autodoc-typehints
    sphinx-paramlinks
commands = make html


[flake8]
max-line-length = 120

